name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-backend:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    - name: Build JAR
      working-directory: ./Backend/MyLibBackend
      run: ./gradlew bootJar --info
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: ./Backend/MyLibBackend/build


  build-frontend:
    runs-on: ubuntu-latest

    #strategy:
     # matrix:
      #  node-version: [22.x]

    steps:
      - uses: actions/checkout@v4
      
      - name: Node Setup
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'
          cache-dependency-path: './Frontend/mylibfrontend/package-lock.json'
      
      - name: Install dependencies
        run: npm ci
        working-directory: ./Frontend/mylibfrontend/
      
      - name: Build frontend
        run: npm run build
        working-directory: ./Frontend/mylibfrontend/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ./Frontend/mylibfrontend/dist

  test-backend:
    runs-on: ubuntu-latest
    needs:
      - build-backend

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle
    - name: Gradle Test
      working-directory: ./Backend/MyLibBackend
      run: ./gradlew test --info
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-test-build
        path: ./Backend/MyLibBackend/build
    
  test-frontend:
    runs-on: ubuntu-latest
    needs:
      - build-frontend
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          
      - name: Node Setup
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'
          cache-dependency-path: './Frontend/mylibfrontend/package-lock.json'
      
      - name: Install dependencies
        run: npm ci
        working-directory: ./Frontend/mylibfrontend/
      
      - name: Unit test frontend
        run: npm test
        working-directory: ./Frontend/mylibfrontend/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: ./Frontend/mylibfrontend/coverage
      

  analyze:
    runs-on: ubuntu-latest
    needs:
      - test-backend
      - test-frontend
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Download Backend Test Build
        uses: actions/download-artifact@v4
        with:  
          path: ./Backend/MyLibBackend/build
          name: backend-test-build
      - name: Download frontend coverage
        uses: actions/download-artifact@v4
        with:  
          path: ./Frontend/mylibfrontend/coverage
          name: frontend-coverage
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  dockerize-backend:
    runs-on: ubuntu-latest
    needs:
      - analyze

    # Permissions for token
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}/backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create version tag
        id: version_backend
        run: echo "VERSION=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        
      - name: Convert repository name to lowercase
        id: backend_image_lower
        run: |
          image_lower=$(echo "${IMAGE_NAME,,}")
          echo "IMAGE_LOWER=$image_lower" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        id: push_backend
        uses: docker/build-push-action@v5
        with:
          context: ./Backend/MyLibBackend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.backend_image_lower.outputs.image_lower }}:${{ steps.version_backend.outputs.version }}
            ${{ env.REGISTRY }}/${{ steps.backend_image_lower.outputs.image_lower }}:latest

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ steps.backend_image_lower.outputs.image_lower }}
          subject-digest: ${{ steps.push_backend.outputs.digest }}
          push-to-registry: true

  dockerize-frontend:
    runs-on: ubuntu-latest
    needs:
      - analyze

    # Permissions for token
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}/frontend
    steps:
          
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create version 
        id: version_frontend
        run: echo "VERSION=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        
      - name: Convert repository name to lowercase
        id: frontend_image_lower
        run: |
          image_lower=$(echo "${IMAGE_NAME,,}")
          echo "IMAGE_LOWER=$image_lower" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        id: push_frontend
        uses: docker/build-push-action@v5
        with:
          context: ./Frontend/mylibfrontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.frontend_image_lower.outputs.image_lower }}:${{ steps.version_frontend.outputs.version }}
            ${{ env.REGISTRY }}/${{ steps.frontend_image_lower.outputs.image_lower }}:latest

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ steps.frontend_image_lower.outputs.image_lower }}
          subject-digest: ${{ steps.push_frontend.outputs.digest }}
          push-to-registry: true

  e2e:
    runs-on: ubuntu-latest
    needs:
      - dockerize-frontend
      - dockerize-backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run E2E test
        working-directory: ./Playwright/code
        run: docker compose -f docker-compose-pipeline.yaml up --abort-on-container-exit --exit-code-from playwright

      - name: Stop container
        if: always()
        working-directory: ./Playwright/code
        run: docker compose -f docker-compose-pipeline.yaml down
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: |
            ./Playwright/test/playwright-report
            ./Playwright/test/test-result
            
