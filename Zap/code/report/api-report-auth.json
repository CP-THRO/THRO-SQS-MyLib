{
	"@programName": "ZAP",
	"@version": "2.16.1",
	"@generated": "Mon, 30 Jun 2025 14:02:37",
	"site":[ 
		{
			"@name": "http://backend:8080",
			"@host": "backend",
			"@port": "8080",
			"@ssl": "false",
			"alerts": [ 
				{
					"pluginid": "40018",
					"alertRef": "40018",
					"alert": "SQL Injection",
					"name": "SQL Injection",
					"riskcode": "3",
					"confidence": "2",
					"riskdesc": "High (Medium)",
					"desc": "<p>SQL injection may be possible.</p>",
					"instances":[ 
						{
							"id": "20",
							"uri": "http://backend:8080/api/v1/auth/add-user",
							"method": "POST",
							"param": "username",
							"attack": "imauser123 AND 1=1 -- ",
							"evidence": "",
							"otherinfo": "The page results were successfully manipulated using the boolean conditions [imauser123 AND 1=1 -- ] and [imauser123 AND 1=2 -- ]\nThe parameter value being modified was stripped from the HTML output for the purposes of the comparison.\nData was returned for the original parameter.\nThe vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter."
						}
					],
					"count": "1",
					"solution": "<p>Do not trust client side input, even if there is client side validation in place.</p><p>In general, type check all data on the server side.</p><p>If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'</p><p>If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.</p><p>If database Stored Procedures can be used, use them.</p><p>Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!</p><p>Do not create dynamic SQL queries using simple string concatenation.</p><p>Escape all data received from the client.</p><p>Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.</p><p>Apply the principle of least privilege by using the least privileged database user possible.</p><p>In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.</p><p>Grant the minimum database access that is necessary for the application.</p>",
					"otherinfo": "<p>The page results were successfully manipulated using the boolean conditions [imauser123 AND 1=1 -- ] and [imauser123 AND 1=2 -- ]</p><p>The parameter value being modified was stripped from the HTML output for the purposes of the comparison.</p><p>Data was returned for the original parameter.</p><p>The vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter.</p>",
					"reference": "<p>https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html</p>",
					"cweid": "89",
					"wascid": "19",
					"sourceid": "796"
				},
				{
					"pluginid": "30001",
					"alertRef": "30001",
					"alert": "Buffer Overflow",
					"name": "Buffer Overflow",
					"riskcode": "2",
					"confidence": "2",
					"riskdesc": "Medium (Medium)",
					"desc": "<p>Buffer overflow errors are characterized by the overwriting of memory spaces of the background web process, which should have never been modified intentionally or unintentionally. Overwriting values of the IP (Instruction Pointer), BP (Base Pointer) and other registers causes exceptions, segmentation faults, and other process errors to occur. Usually these errors end execution of the application in an unexpected way.</p>",
					"instances":[ 
						{
							"id": "21",
							"uri": "http://backend:8080/api/v1/auth/add-user",
							"method": "POST",
							"param": "username",
							"attack": "hSoAovNngUmIZawipRMHOqGGEWLndcqcdKPhaGfVXcdHLmeKKHWaCLwqZyyUhOkfAMAFAraECHHpswEVAFHILxKydTnqayZVEPaxxVJDmfwWqTpAGvqsPpVOAcjGxRYksBHwIoObkUwbdFmPRLoDjNNxXEpcPjiRvhycZJUThRlYqPsEDwnqYpGlnVIWkFpZsiRlluYaTDIjwcVLCfhSZDpyFUaWdrIStsvFhNJdOacRceOaTMNPJHTfVPYpXmMldnUcbTxOOFarkFUTVZYvLdoZjcEtBjuxbxnUsqEQaQcgiojRinWIjNXbnaDfwFFEDZvubKtQDrRXTnhBokpulVqJkbQtfPAPgAMLaOuBHTBRgbqlGqMTFaBjsoBRNPeLchyaFnaIOnMZUhPKEoqPElCjhrqZeSvaSmbDYxHpphaxcVCnaVvvtJGDnbXRkcDMefMfjwkLfeHxEKkZbsNMbLliZeIrWfeCpKfnondPJIUTZmFHfhlrensuxZtMbmommPPErIatVknwpIeOXAVAcIYleTxiJGFhEjHewgJaHraEaWhMRgnFElsccVKqHephbenDWFUsZrdxedkiGTHWspBRyXkTlSlBQVosmewFvDCMFobtLJhdCnbNRmDVSUjvmdGTGUhVfmLOuTwGWlMZDUPEehOXTdergmgTNJEUcRQKYSdhVBqIsSrOAFSSaPhaWLHwYeQlgxUyMsjBWrugAasZxokEPHbiKcUFDnQsDJXGVAQEpMlkUvsCegAjewjCVEdfRAOAZOKxLIAaiapjOOdeHEDgUFdHAoODxCaSmIfKvHcRymYmxAiYKEsGxVjJKRZDTxIiwKYTnAXjLllCJgCjYcpZVuooFDpLcSLvfYfcHbmjZQcDwCWmXmQNFibKBMuJYKxvCRTiAAqoDnEjMEmHXEtKabfTgAckNmyUCWwgTLbBxLpnrpNiHPQRWmduJmKGNgjZGUbihAeuBDStkqIERskdPFvctEFJhacmiClBvYEuVacnDsWYVQnDGsbvXXoDscGyhMGvfDbGapylJjFTTlmDIdeOJyBZkHUsmdgaIDYRNMkjkCnyScwrYHplICCckhmRHeMYabkZPrGfjJoPPWRsqupQQAnHKLllqqiITlYispySNgOUSVfUZLePOXviURTaLJdeqmyktCAgiUpqXPvlAYBqMhfJPIVVAbugmcWwtJJMZDTSHKqhWAYmwNaKqyxIEweYGOgMYNNUNkHTSXYHPSegnIyGhljySbpwQiSEEioTkueOBVuGGlenKvJnmdgmQxWOhmPrIxLBehkgrNkGWqihbvdQFgaLUlODKOYnrehoWjLMIJmaEUbJTgaysJgvuNQFaISkCgBkGlkUHceXNIpdiBwqcEvKmGZKDIyBkIpQnZVJmnxvvdvZsKUadSTbPxIgrNapXGbtkMKdnGlyhXtESJiCwwxEutZTjFIioKyahkZukZqyvqCHVsLGbhRlcJwHncIBGvwhirDJjsZnPapspbNTkBafKYoMcxxjEwdqvEgtHkrEGNgslnfZFyceEIHKFyFVsvbTdmIvYYHXhhrpBSawOIDSlfFhQyAGTYyQVJtoICcHlURcELHCpvCEwySxrnkxdSbRmRuyAvlBDYitAIYXdmlnqWcwBCOrUAOgyHdQGFtdhWDrxDsbkNiPIwgEHawSOPmPGZobZMZpAtGwTqGsevABtDCKJQcnTJVhKSwUaVruUvpSoKYohvvHoacUJCOyDuQLxQZUMOwTRkKiNuNeVamWuxOJBnivwLQQGNngUSYnSrSviPVafSqovDPPDyjODhWGJbOeYqMZjNLaUxQLtBBcNKNteqUiNWrpTAWlFdEvqTTvIhMejsWLImpgqJoGUnRHaxriWaSXbyoWQoaDIoNIUtsjOamUEPiBZcOytYjMLcyHPlWfkCrZQbpEYvpONgfprwDqBiGDnYJeLliLBacmkbhAoxrHKZkjRYiYWUemoXbMBjWDGxoiKjHmRaKTgsdVWWmMcohfqiaoPUhkyRpSXpgrLRtscCCiaJYSxNEGmeeUhBhKeAyjaRlFHjqmFYTkkviEDrnbhQXyrtytVbercndGSiYWFYEL",
							"evidence": "Connection: close",
							"otherinfo": "Potential Buffer Overflow. The script closed the connection and threw a 500 Internal Server Error."
						}
					],
					"count": "1",
					"solution": "<p>Rewrite the background program using proper return length checking. This will require a recompile of the background executable.</p>",
					"otherinfo": "<p>Potential Buffer Overflow. The script closed the connection and threw a 500 Internal Server Error.</p>",
					"reference": "<p>https://owasp.org/www-community/attacks/Buffer_overflow_attack</p>",
					"cweid": "120",
					"wascid": "7",
					"sourceid": "2529"
				},
				{
					"pluginid": "90004",
					"alertRef": "90004-1",
					"alert": "Insufficient Site Isolation Against Spectre Vulnerability",
					"name": "Insufficient Site Isolation Against Spectre Vulnerability",
					"riskcode": "1",
					"confidence": "2",
					"riskdesc": "Low (Medium)",
					"desc": "<p>Cross-Origin-Resource-Policy header is an opt-in header designed to counter side-channels attacks like Spectre. Resource should be specifically set as shareable amongst different origins.</p>",
					"instances":[ 
						{
							"id": "18",
							"uri": "http://backend:8080/api/v1/books/get/all?startIndex=0&numResultsToGet=100",
							"method": "GET",
							"param": "Cross-Origin-Resource-Policy",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "11",
							"uri": "http://backend:8080/api/v1/health",
							"method": "GET",
							"param": "Cross-Origin-Resource-Policy",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "19",
							"uri": "http://backend:8080/api/v1/search/external/keyword?keywords=&startIndex=0&numResultsToGet=100",
							"method": "GET",
							"param": "Cross-Origin-Resource-Policy",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "1",
							"uri": "http://backend:8080/v3/api-docs",
							"method": "GET",
							"param": "Cross-Origin-Resource-Policy",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "12",
							"uri": "http://backend:8080/api/v1/auth/authenticate",
							"method": "POST",
							"param": "Cross-Origin-Resource-Policy",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						}
					],
					"count": "5",
					"solution": "<p>Ensure that the application/web server sets the Cross-Origin-Resource-Policy header appropriately, and that it sets the Cross-Origin-Resource-Policy header to 'same-origin' for all web pages.</p><p>'same-site' is considered as less secured and should be avoided.</p><p>If resources must be shared, set the header to 'cross-origin'.</p><p>If possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Resource-Policy header (https://caniuse.com/mdn-http_headers_cross-origin-resource-policy).</p>",
					"otherinfo": "",
					"reference": "<p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy</p>",
					"cweid": "693",
					"wascid": "14",
					"sourceid": "25"
				},
				{
					"pluginid": "10111",
					"alertRef": "10111",
					"alert": "Authentication Request Identified",
					"name": "Authentication Request Identified",
					"riskcode": "0",
					"confidence": "1",
					"riskdesc": "Informational (Low)",
					"desc": "<p>The given request has been identified as an authentication request. The 'Other Info' field contains a set of key=value lines which identify any relevant fields. If the request is in a context which has an Authentication Method set to \"Auto-Detect\" then this rule will change the authentication to match the request identified.</p>",
					"instances":[ 
						{
							"id": "8",
							"uri": "http://backend:8080/api/v1/auth/add-user",
							"method": "POST",
							"param": "username",
							"attack": "",
							"evidence": "password",
							"otherinfo": "userParam=username\nuserValue=imauser123\npasswordParam=password"
						},
						{
							"id": "7",
							"uri": "http://backend:8080/api/v1/auth/authenticate",
							"method": "POST",
							"param": "username",
							"attack": "",
							"evidence": "password",
							"otherinfo": "userParam=username\nuserValue=imauser123\npasswordParam=password"
						}
					],
					"count": "2",
					"solution": "<p>This is an informational alert rather than a vulnerability and so there is nothing to fix.</p>",
					"otherinfo": "<p>userParam=username</p><p>userValue=imauser123</p><p>passwordParam=password</p>",
					"reference": "<p>https://www.zaproxy.org/docs/desktop/addons/authentication-helper/auth-req-id/</p>",
					"cweid": "-1",
					"wascid": "-1",
					"sourceid": "15"
				},
				{
					"pluginid": "10049",
					"alertRef": "10049",
					"alert": "Non-Storable Content",
					"name": "Non-Storable Content",
					"riskcode": "0",
					"confidence": "2",
					"riskdesc": "Informational (Medium)",
					"desc": "<p>The response contents are not storable by caching components such as proxy servers. If the response does not contain sensitive, personal or user-specific information, it may benefit from being stored and cached, to improve performance.</p>",
					"instances":[ 
						{
							"id": "15",
							"uri": "http://backend:8080/api/v1/books/delete/wishlist/",
							"method": "DELETE",
							"param": "",
							"attack": "",
							"evidence": "DELETE ",
							"otherinfo": ""
						},
						{
							"id": "17",
							"uri": "http://backend:8080/api/v1/books/get/all?startIndex=0&numResultsToGet=100",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "no-store",
							"otherinfo": ""
						},
						{
							"id": "16",
							"uri": "http://backend:8080/api/v1/books/get/byID/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "no-store",
							"otherinfo": ""
						},
						{
							"id": "14",
							"uri": "http://backend:8080/api/v1/books/get/library?startIndex=0&numResultsToGet=100",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "no-store",
							"otherinfo": ""
						},
						{
							"id": "13",
							"uri": "http://backend:8080/api/v1/books/get/wishlist?startIndex=0&numResultsToGet=100",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "no-store",
							"otherinfo": ""
						},
						{
							"id": "6",
							"uri": "http://backend:8080/api/v1/health",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "no-store",
							"otherinfo": ""
						},
						{
							"id": "0",
							"uri": "http://backend:8080/v3/api-docs",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "no-store",
							"otherinfo": ""
						},
						{
							"id": "10",
							"uri": "http://backend:8080/api/v1/auth/add-user",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "no-store",
							"otherinfo": ""
						},
						{
							"id": "9",
							"uri": "http://backend:8080/api/v1/auth/authenticate",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "no-store",
							"otherinfo": ""
						},
						{
							"id": "4",
							"uri": "http://backend:8080/api/v1/books/add/library",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "no-store",
							"otherinfo": ""
						},
						{
							"id": "3",
							"uri": "http://backend:8080/api/v1/books/add/wishlist",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "no-store",
							"otherinfo": ""
						},
						{
							"id": "2",
							"uri": "http://backend:8080/api/v1/books/update/rating",
							"method": "PUT",
							"param": "",
							"attack": "",
							"evidence": "PUT ",
							"otherinfo": ""
						},
						{
							"id": "5",
							"uri": "http://backend:8080/api/v1/books/update/status",
							"method": "PUT",
							"param": "",
							"attack": "",
							"evidence": "PUT ",
							"otherinfo": ""
						}
					],
					"count": "13",
					"solution": "<p>The content may be marked as storable by ensuring that the following conditions are satisfied:</p><p>The request method must be understood by the cache and defined as being cacheable (\"GET\", \"HEAD\", and \"POST\" are currently defined as cacheable)</p><p>The response status code must be understood by the cache (one of the 1XX, 2XX, 3XX, 4XX, or 5XX response classes are generally understood)</p><p>The \"no-store\" cache directive must not appear in the request or response header fields</p><p>For caching by \"shared\" caches such as \"proxy\" caches, the \"private\" response directive must not appear in the response</p><p>For caching by \"shared\" caches such as \"proxy\" caches, the \"Authorization\" header field must not appear in the request, unless the response explicitly allows it (using one of the \"must-revalidate\", \"public\", or \"s-maxage\" Cache-Control response directives)</p><p>In addition to the conditions above, at least one of the following conditions must also be satisfied by the response:</p><p>It must contain an \"Expires\" header field</p><p>It must contain a \"max-age\" response directive</p><p>For \"shared\" caches such as \"proxy\" caches, it must contain a \"s-maxage\" response directive</p><p>It must contain a \"Cache Control Extension\" that allows it to be cached</p><p>It must have a status code that is defined as cacheable by default (200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501).</p>",
					"otherinfo": "",
					"reference": "<p>https://datatracker.ietf.org/doc/html/rfc7234</p><p>https://datatracker.ietf.org/doc/html/rfc7231</p><p>https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html</p>",
					"cweid": "524",
					"wascid": "13",
					"sourceid": "26"
				}
			]
		}
	],
	"sequences":[
	]

}
